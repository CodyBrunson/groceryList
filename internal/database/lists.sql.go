// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: lists.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (id, created_at, updated_at, name)
VALUES (
gen_random_uuid(),
now(),
now(),
$1
)
RETURNING id, created_at, updated_at, deleted_at, name
`

func (q *Queries) CreateList(ctx context.Context, name string) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, name)
	var i List
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const deleteListByID = `-- name: DeleteListByID :exec
UPDATE lists
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteListByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteListByID, id)
	return err
}

const getAllLists = `-- name: GetAllLists :many
SELECT id, created_at, updated_at, deleted_at, name FROM lists
WHERE deleted_at IS NULL
`

func (q *Queries) GetAllLists(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getAllLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListByID = `-- name: GetListByID :one
SELECT id, created_at, updated_at, deleted_at, name FROM lists
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) GetListByID(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.db.QueryRowContext(ctx, getListByID, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}
